{
  "Comment": "Sample Playbook to Geolocate an IP",
  "StartAt": "Was_Playbook_Direct_Executed",
  "States": {
    "Was_Playbook_Direct_Executed": {
      "Type": "Choice",
      "Choices": [
        {
          "And": [
            { "Variable": "$.artifacts", "IsPresent": true },
            { "Variable": "$.execution_id", "IsPresent": true },
            { "Variable": "$.errors", "IsPresent": false },
            { "Variable": "$.results", "IsPresent": false }
          ],
          "Next": "PLAYBOOK_FORMATTER"
        },
        {
          "And": [
            { "Variable": "$.artifacts", "IsPresent": true },
            { "Variable": "$.execution_id", "IsPresent": true },
            { "Variable": "$.errors", "IsPresent": true },
            { "Variable": "$.results", "IsPresent": true }
          ],
          "Next": "New_Interaction_State"
        }
      ],
      "Default": "Setup_Socless_Global_State"
    },
    "Setup_Socless_Global_State": {
      "Type": "Task",
      "Resource": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:_socless_setup_global_state_for_direct_invoked_playbook",
      "Parameters": {
        "execution_id.$": "$$.Execution.Name",
        "playbook_name.$": "$$.StateMachine.Name",
        "playbook_event_details.$": "$$.Execution.Input"
      },
      "Next": "New_Interaction_State"
    },
    "PLAYBOOK_FORMATTER": {
      "Type": "Pass",
      "Parameters": {
        "execution_id.$": "$.execution_id",
        "artifacts.$": "$.artifacts",
        "results": {},
        "errors": {}
      },
      "Next": "New_Interaction_State"
    },
    "New_Interaction_State": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke.waitForTaskToken",
      "Parameters": {
        "FunctionName": "${{self:custom.slack.PromptForConfirmation}}",
        "Payload": {
          "sfn_context": {
            "execution_id.$": "$.execution_id",
            "artifacts.$": "$.artifacts",
            "errors.$": "$.errors",
            "results.$": "$.results",
            "State_Config": {
              "Name": "New_Interaction_State",
              "Parameters": {
                "no_text": "No",
                "prompt_text": "Are you happy?",
                "receiver": "Slack_User_For_Response",
                "target": "$.results.Validate_Username.name",
                "target_type": "user",
                "text": "Hi, are you happy?",
                "yes_text": "Yes"
              }
            }
          },
          "task_token.$": "$$.Task.Token"
        }
      },
      "Next": "Slack_User_For_Response",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ]
    },
    "Slack_User_For_Response": {
      "Type": "Task",
      "Parameters": {
        "execution_id.$": "$.execution_id",
        "artifacts.$": "$.artifacts",
        "errors.$": "$.errors",
        "results.$": "$.results",
        "State_Config": {
          "Name": "Slack_User_For_Response",
          "Parameters": {
            "no_text": "No",
            "prompt_text": "Are you happy?",
            "receiver": "Await_User_Response",
            "target": "$.results.Validate_Username.name",
            "target_type": "user",
            "text": "Hi, are you happy?",
            "yes_text": "Yes"
          }
        }
      },
      "Catch": [{ "ErrorEquals": ["States.ALL"], "Next": "Is_User_Happy" }],
      "Retry": [
        {
          "ErrorEquals": ["ConnectionError"],
          "IntervalSeconds": 30,
          "MaxAttempts": 2,
          "BackoffRate": 2
        },
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Resource": "${{self:custom.slack.PromptForConfirmation}}",
      "Next": "Await_User_Response"
    },
    "Await_User_Response": {
      "Type": "Task",
      "Resource": "${{self:custom.core.AwaitMessageResponseActivity}}",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        },
        {
          "ErrorEquals": ["Lambda.ServiceException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "Is_User_Happy"
    },
    "Is_User_Happy": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.results.result",
          "StringEquals": "false",
          "Next": "User_Is_Not_Happy"
        }
      ],
      "Default": "User_Is_Happy"
    },
    "User_Is_Happy": { "Type": "Pass", "Next": "Celebrate_With_User" },
    "Celebrate_With_User": {
      "Type": "Task",
      "Parameters": {
        "execution_id.$": "$.execution_id",
        "artifacts.$": "$.artifacts",
        "errors.$": "$.errors",
        "results.$": "$.results",
        "State_Config": {
          "Name": "Celebrate_With_User",
          "Parameters": {
            "message_template": "I'm happy too! Yay!",
            "target": "user",
            "target_type": "channel"
          }
        }
      },
      "Resource": "${{self:custom.slack.SendMessage}}",
      "Next": "Mark_As_Success",
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ]
    },
    "Mark_As_Success": { "Type": "Succeed" },
    "User_Is_Not_Happy": { "Type": "Pass", "Next": "Parallel_Cheer_User_Up" },
    "Parallel_Cheer_User_Up": {
      "Type": "Parallel",
      "Next": "merge_parallel_cheer_user_up",
      "Branches": [
        {
          "StartAt": "Slack_User_Happiness",
          "States": {
            "Slack_User_Happiness": {
              "Type": "Task",
              "Parameters": {
                "execution_id.$": "$.execution_id",
                "artifacts.$": "$.artifacts",
                "errors.$": "$.errors",
                "results.$": "$.results",
                "State_Config": {
                  "Name": "Slack_User_Happiness",
                  "Parameters": {
                    "message_template": "I'm happy too! Yay!",
                    "target": "user",
                    "target_type": "channel"
                  }
                }
              },
              "Resource": "${{self:custom.slack.PromptForConfirmation}}",
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ]
            }
          }
        },
        {
          "StartAt": "Order_Pizza_For_User",
          "States": {
            "Order_Pizza_For_User": {
              "Type": "Task",
              "Parameters": {
                "execution_id.$": "$.execution_id",
                "artifacts.$": "$.artifacts",
                "errors.$": "$.errors",
                "results.$": "$.results",
                "State_Config": {
                  "Name": "Order_Pizza_For_User",
                  "Parameters": {
                    "type": "bbq with bacon bits",
                    "restaurant": "Five10 Pizza"
                  }
                }
              },
              "Resource": "${{self:custom.hubgrub.PlaceOrder}}",
              "Next": "Pour_Coffee_For_User",
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ]
            },
            "Pour_Coffee_For_User": {
              "Type": "Task",
              "Parameters": {
                "execution_id.$": "$.execution_id",
                "artifacts.$": "$.artifacts",
                "errors.$": "$.errors",
                "results.$": "$.results",
                "State_Config": {
                  "Name": "Pour_Coffee_For_User",
                  "Parameters": { "how": "coffee, sugar, cream" }
                }
              },
              "Resource": "${{self:custom.iotBrewer.PourCoffee}}",
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException"
                  ],
                  "IntervalSeconds": 2,
                  "MaxAttempts": 6,
                  "BackoffRate": 2
                }
              ]
            }
          }
        }
      ]
    },
    "merge_parallel_cheer_user_up": {
      "Type": "Task",
      "Resource": "${{self:custom.core.MergeParallelOutput}}",
      "Catch": [],
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException"
          ],
          "IntervalSeconds": 2,
          "MaxAttempts": 6,
          "BackoffRate": 2
        }
      ],
      "Next": "End_Cheer_Up"
    },
    "End_Cheer_Up": {
      "Type": "Task",
      "Parameters": {
        "execution_id.$": "$.execution_id",
        "artifacts.$": "$.artifacts",
        "errors.$": "$.errors",
        "results.$": "$.results",
        "State_Config": {
          "Name": "End_Cheer_Up",
          "Parameters": { "status": "done" }
        }
      },
      "Resource": "${{self.custom.jira.TransitionIssue}}",
      "End": true
    }
  }
}
